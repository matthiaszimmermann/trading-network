package org.eclipse.scout.tradingnetwork.shared.organization;

import javax.annotation.Generated;

import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;
import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.fields.tablefield.AbstractTableFieldBeanData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;
import org.eclipse.scout.tradingnetwork.shared.common.AbstractUrlImageFieldData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 */
@Generated(value = "org.eclipse.scout.tradingnetwork.client.organization.OrganizationOverview", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class OrganizationOverviewData extends AbstractFormData {

  private static final long serialVersionUID = 1L;

  public Country getCountry() {
    return getFieldByClass(Country.class);
  }

  public Greeting getGreeting() {
    return getFieldByClass(Greeting.class);
  }

  public OrganizationLogo getOrganizationLogo() {
    return getFieldByClass(OrganizationLogo.class);
  }

  /**
   * access method for property OrganizationName.
   */
  public String getOrganizationName() {
    return getOrganizationNameProperty().getValue();
  }

  /**
   * access method for property OrganizationName.
   */
  public void setOrganizationName(String organizationName) {
    getOrganizationNameProperty().setValue(organizationName);
  }

  public OrganizationNameProperty getOrganizationNameProperty() {
    return getPropertyByClass(OrganizationNameProperty.class);
  }

  public OverviewTable getOverviewTable() {
    return getFieldByClass(OverviewTable.class);
  }

  /**
   * access method for property UserId.
   */
  public String getUserId() {
    return getUserIdProperty().getValue();
  }

  /**
   * access method for property UserId.
   */
  public void setUserId(String userId) {
    getUserIdProperty().setValue(userId);
  }

  public UserIdProperty getUserIdProperty() {
    return getPropertyByClass(UserIdProperty.class);
  }

  public static class Country extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;
  }

  public static class Greeting extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;
  }

  public static class OrganizationLogo extends AbstractUrlImageFieldData {

    private static final long serialVersionUID = 1L;
  }

  public static class OrganizationNameProperty extends AbstractPropertyData<String> {

    private static final long serialVersionUID = 1L;
  }

  public static class OverviewTable extends AbstractTableFieldBeanData {

    private static final long serialVersionUID = 1L;

    @Override
    public OverviewTableRowData addRow() {
      return (OverviewTableRowData) super.addRow();
    }

    @Override
    public OverviewTableRowData addRow(int rowState) {
      return (OverviewTableRowData) super.addRow(rowState);
    }

    @Override
    public OverviewTableRowData createRow() {
      return new OverviewTableRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return OverviewTableRowData.class;
    }

    @Override
    public OverviewTableRowData[] getRows() {
      return (OverviewTableRowData[]) super.getRows();
    }

    @Override
    public OverviewTableRowData rowAt(int index) {
      return (OverviewTableRowData) super.rowAt(index);
    }

    public void setRows(OverviewTableRowData[] rows) {
      super.setRows(rows);
    }

    public static class OverviewTableRowData extends AbstractTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String infoType = "infoType";
      public static final String count = "count";
      private String m_infoType;
      private Long m_count;

      public String getInfoType() {
        return m_infoType;
      }

      public void setInfoType(String newInfoType) {
        m_infoType = newInfoType;
      }

      public Long getCount() {
        return m_count;
      }

      public void setCount(Long newCount) {
        m_count = newCount;
      }
    }
  }

  public static class UserIdProperty extends AbstractPropertyData<String> {

    private static final long serialVersionUID = 1L;
  }
}
